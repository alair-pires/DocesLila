// <auto-generated />
using System;
using DocesLila.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DocesLila.Migrations
{
    [DbContext(typeof(DocesLilaContext))]
    [Migration("20230731024701_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DocesLila.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Batch")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<double>("Price")
                        .HasPrecision(3, 2)
                        .HasColumnType("float(3)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("Date");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "gostoso",
                            ExpireDate = new DateTime(2023, 8, 2, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(2730),
                            Price = 10.0,
                            Quantity = 300,
                            RegistrationDate = new DateTime(2023, 7, 30, 23, 47, 1, 646, DateTimeKind.Local).AddTicks(6424),
                            Title = "Casadinho"
                        },
                        new
                        {
                            Id = 2,
                            Description = "muito bom",
                            ExpireDate = new DateTime(2023, 8, 3, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3022),
                            Price = 8.0,
                            Quantity = 200,
                            RegistrationDate = new DateTime(2023, 7, 30, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3019),
                            Title = "Bala de coco"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Delicia",
                            ExpireDate = new DateTime(2023, 8, 9, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3028),
                            Price = 5.0,
                            Quantity = 120,
                            RegistrationDate = new DateTime(2023, 7, 30, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3027),
                            Title = "Rosquinha"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Doce",
                            ExpireDate = new DateTime(2023, 8, 14, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3030),
                            Price = 4.0,
                            Quantity = 500,
                            RegistrationDate = new DateTime(2023, 7, 30, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3030),
                            Title = "Suspiro"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Saboroso",
                            ExpireDate = new DateTime(2023, 8, 1, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3032),
                            Price = 12.0,
                            Quantity = 82,
                            RegistrationDate = new DateTime(2023, 7, 30, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3032),
                            Title = "Biscoito de Nozes"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Chocolate",
                            ExpireDate = new DateTime(2023, 7, 31, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3034),
                            Price = 20.0,
                            Quantity = 40,
                            RegistrationDate = new DateTime(2023, 7, 30, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3034),
                            Title = "Alfajor"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Macio",
                            ExpireDate = new DateTime(2023, 8, 6, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3036),
                            Price = 6.0,
                            Quantity = 234,
                            RegistrationDate = new DateTime(2023, 7, 30, 23, 47, 1, 647, DateTimeKind.Local).AddTicks(3036),
                            Title = "Goiabinha"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
